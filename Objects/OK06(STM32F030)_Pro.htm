<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\OK06(STM32F030)_Pro.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\OK06(STM32F030)_Pro.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Thu Dec 29 13:20:08 2022
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; main_loop &rArr; call_mode_process &rArr; current_mode_20_99 &rArr; process_short_open &rArr; process_open_u &rArr; mode_open_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[27]">CEC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">CEC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC1_COMP_IRQHandler</a> from adc.o(i.ADC1_COMP_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[27]">CEC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[14]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[15]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[16]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[10]">EXTI0_1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[11]">EXTI2_3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[12]">EXTI4_15_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[21]">I2C1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[22]">I2C2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[23]">SPI1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[24]">SPI2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[28]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[1d]">TIM14_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1e]">TIM15_IRQHandler</a> from timer.o(i.TIM15_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1f]">TIM16_IRQHandler</a> from timer.o(i.TIM16_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[20]">TIM17_IRQHandler</a> from timer.o(i.TIM17_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[18]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[19]">TIM1_CC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1a]">TIM2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1b]">TIM3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1c]">TIM6_DAC_IRQHandler</a> from timer.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[13]">TS_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[25]">USART1_IRQHandler</a> from uart.o(i.USART1_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[26]">USART2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[2a]">__main</a> from __main.o(!!!main) referenced from startup_stm32f030x8.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2d]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[200]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[201]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[202]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[31]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[203]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[204]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[205]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[206]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[207]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[208]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[209]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[20a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[20b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[20c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[20d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[20e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[20f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[210]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[211]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[212]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[213]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[214]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[215]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[216]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[217]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[36]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[218]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[219]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[21a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[21b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[21c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[21d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[21e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[21f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[30]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[220]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[32]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; main_loop &rArr; call_mode_process &rArr; current_mode_20_99 &rArr; process_short_open &rArr; process_open_u &rArr; mode_open_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[221]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[51]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[35]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[222]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[37]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[223]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_ope_main
</UL>

<P><STRONG><a name="[224]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal_open
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_pulse_width_to_rpm
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosei_culc_ver
</UL>

<P><STRONG><a name="[226]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_err_record
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal_open
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_section
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_fullclose_position
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ram_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_huka_data_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_reset_upper_limit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_operate_main
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huka_lev_ver
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosei_culc_temp
</UL>

<P><STRONG><a name="[227]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_AD_exchange_to_Nm
</UL>

<P><STRONG><a name="[22a]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_AD_exchange_to_Nm
</UL>

<P><STRONG><a name="[3b]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[22b]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_AD_exchange_to_Nm
</UL>

<P><STRONG><a name="[3f]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_AD_exchange_to_Nm
</UL>

<P><STRONG><a name="[41]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[40]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_AD_exchange_to_Nm
</UL>

<P><STRONG><a name="[22c]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_AD_exchange_to_Nm
</UL>

<P><STRONG><a name="[22d]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_pulse_exchange_to_rotation
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_AD_exchange_to_Nm
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_Nm_exchange_to_AD
</UL>

<P><STRONG><a name="[43]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[42]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_pulse_exchange_to_rotation
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_AD_exchange_to_Nm
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_Nm_exchange_to_AD
</UL>

<P><STRONG><a name="[22e]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[22f]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_pulse_exchange_to_rotation
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_AD_exchange_to_Nm
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_Nm_exchange_to_AD
</UL>

<P><STRONG><a name="[230]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[49]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1e4]"></a>_dsqrt</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[4a]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[231]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[4c]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[233]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[234]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[34]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[4d]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[38]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[235]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, adc.o(i.ADC1_COMP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC1_COMP_IRQHandler &rArr; R_ADC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1df]"></a>ADC_ChannelSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(i.ADC_ChannelSet))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ad_class
</UL>

<P><STRONG><a name="[64]"></a>ADC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Adc
</UL>

<P><STRONG><a name="[53]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Adc
</UL>

<P><STRONG><a name="[63]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f0xx_adc.o(i.ADC_GetCalibrationFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_GetCalibrationFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Adc
</UL>

<P><STRONG><a name="[65]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f0xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_Start
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Adc
</UL>

<P><STRONG><a name="[61]"></a>ADC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f0xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Adc
</UL>

<P><STRONG><a name="[93]"></a>ADC_StartOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StartOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_Start
</UL>

<P><STRONG><a name="[94]"></a>ADC_StopOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StopOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_Stop
</UL>

<P><STRONG><a name="[60]"></a>ADC_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Adc
</UL>

<P><STRONG><a name="[67]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIC_Gpio
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer17
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer16
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Adc_Gpio
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel6_Stop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel4_Stop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer15
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gpio
</UL>

<P><STRONG><a name="[76]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer17
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer16
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer15
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IIC_Ack</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, iic.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[57]"></a>IIC_NAck</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, iic.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[58]"></a>IIC_Read_Byte</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, iic.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_ReadOneByte
</UL>

<P><STRONG><a name="[59]"></a>IIC_Send_Byte</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, iic.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_WriteOneByte
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_ReadOneByte
</UL>

<P><STRONG><a name="[5a]"></a>IIC_Start</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, iic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_WriteOneByte
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_ReadOneByte
</UL>

<P><STRONG><a name="[5b]"></a>IIC_Stop</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, iic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_WriteOneByte
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_ReadOneByte
</UL>

<P><STRONG><a name="[5c]"></a>IIC_Wait_Ack</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, iic.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_WriteOneByte
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_ReadOneByte
</UL>

<P><STRONG><a name="[73]"></a>IWDG_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IWDG
</UL>

<P><STRONG><a name="[72]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_WDT_Restart
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IWDG
</UL>

<P><STRONG><a name="[70]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IWDG
</UL>

<P><STRONG><a name="[71]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IWDG
</UL>

<P><STRONG><a name="[6f]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IWDG
</UL>

<P><STRONG><a name="[5d]"></a>Init_Adc</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, adc.o(i.Init_Adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Init_Adc &rArr; Init_Adc_Gpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Adc_Gpio
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>Init_Adc_Gpio</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, adc.o(i.Init_Adc_Gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Init_Adc_Gpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Adc
</UL>

<P><STRONG><a name="[68]"></a>Init_Delay</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sys.o(i.Init_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>Init_Gpio</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, gpio.o(i.Init_Gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Init_Gpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>Init_IIC_Gpio</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, iic.o(i.Init_IIC_Gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Init_IIC_Gpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_M24C16
</UL>

<P><STRONG><a name="[6c]"></a>Init_IWDG</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sys.o(i.Init_IWDG))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init_IWDG &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>Init_M24C16</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m24c16.o(i.Init_M24C16))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Init_M24C16 &rArr; Init_IIC_Gpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIC_Gpio
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_init
</UL>

<P><STRONG><a name="[75]"></a>Init_Timer15</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, timer.o(i.Init_Timer15))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Init_Timer15 &rArr; TIM_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>Init_Timer16</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, timer.o(i.Init_Timer16))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Init_Timer16 &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel4_Start
</UL>

<P><STRONG><a name="[81]"></a>Init_Timer17</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, timer.o(i.Init_Timer17))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Init_Timer17 &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel6_Start
</UL>

<P><STRONG><a name="[82]"></a>Init_Timer6</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, timer.o(i.Init_Timer6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init_Timer6
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>Init_Uart1</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, uart.o(i.Init_Uart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Init_Uart1 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>M24C16_Read</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, m24c16.o(i.M24C16_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = M24C16_Read &rArr; M24C16_ReadOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_ReadOneByte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_WDT_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_memory_handler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_storage_all
</UL>

<P><STRONG><a name="[8b]"></a>M24C16_ReadOneByte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, m24c16.o(i.M24C16_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M24C16_ReadOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_Read
</UL>

<P><STRONG><a name="[8d]"></a>M24C16_Write</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, m24c16.o(i.M24C16_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = M24C16_Write &rArr; M24C16_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_WriteOneByte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_WDT_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_memory_handler
</UL>

<P><STRONG><a name="[8e]"></a>M24C16_WriteOneByte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, m24c16.o(i.M24C16_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M24C16_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_Write
</UL>

<P><STRONG><a name="[79]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f0xx_misc.o(i.NVIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer17
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer16
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer6
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer15
</UL>

<P><STRONG><a name="[66]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer17
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer16
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Adc_Gpio
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer15
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gpio
</UL>

<P><STRONG><a name="[83]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer6
</UL>

<P><STRONG><a name="[5f]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer17
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer16
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer15
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Adc
</UL>

<P><STRONG><a name="[54]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[90]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, stm32f0xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[6e]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f0xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IWDG
</UL>

<P><STRONG><a name="[6d]"></a>RCC_LSICmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_LSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IWDG
</UL>

<P><STRONG><a name="[92]"></a>R_ADC_Start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adc.o(i.R_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_ADC_Start &rArr; ADC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartOfConversion
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_ad_start
</UL>

<P><STRONG><a name="[52]"></a>R_ADC_Stop</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, adc.o(i.R_ADC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_ADC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StopOfConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>R_TAU0_Channel4_Start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, timer.o(i.R_TAU0_Channel4_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = R_TAU0_Channel4_Start &rArr; Init_Timer16 &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer16
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_main
</UL>

<P><STRONG><a name="[97]"></a>R_TAU0_Channel4_Stop</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, timer.o(i.R_TAU0_Channel4_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = R_TAU0_Channel4_Stop &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_main
</UL>

<P><STRONG><a name="[98]"></a>R_TAU0_Channel6_Start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, timer.o(i.R_TAU0_Channel6_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = R_TAU0_Channel6_Start &rArr; Init_Timer17 &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer17
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecu_test_check
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_off_break_on_setting
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_off_break_max_setting
</UL>

<P><STRONG><a name="[99]"></a>R_TAU0_Channel6_Stop</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, timer.o(i.R_TAU0_Channel6_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = R_TAU0_Channel6_Stop &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_flag_all_clear
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_main
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_on_break_off_setting
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_off_break_off_setting
</UL>

<P><STRONG><a name="[14a]"></a>R_UART0_Receive</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.R_UART0_Receive))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_test_check
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_recv_del
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_serial_uart_tx_end
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_serial_uart_rx_end
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_production_test
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart
</UL>

<P><STRONG><a name="[9a]"></a>R_UART0_Send</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uart.o(i.R_UART0_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R_UART0_Send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_test_check
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_start
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_production_test
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart
</UL>

<P><STRONG><a name="[8c]"></a>R_WDT_Restart</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys.o(i.R_WDT_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_WDT_Restart
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_Write
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_Read
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_storage_all
</UL>

<P><STRONG><a name="[69]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f0xx_misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Delay
</UL>

<P><STRONG><a name="[28]"></a>SystemInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock_HSI
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_HSI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>TIM15_IRQHandler</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, timer.o(i.TIM15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM15_IRQHandler &rArr; int_input_encoder &rArr; ope_pulse_count_main &rArr; zene_pulse_count &rArr; no_direct_p_in &rArr; ope_key_stop &rArr; sw_in_end
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_input_encoder
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM16_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timer.o(i.TIM16_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM17_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timer.o(i.TIM17_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, timer.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM6_DAC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_system_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer17
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer16
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer6
</UL>

<P><STRONG><a name="[80]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer17
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer16
</UL>

<P><STRONG><a name="[7a]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer15
</UL>

<P><STRONG><a name="[7c]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel6_Start
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel6_Stop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel4_Stop
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel4_Start
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer6
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer15
</UL>

<P><STRONG><a name="[96]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel6_Start
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel6_Stop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel4_Stop
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel4_Start
</UL>

<P><STRONG><a name="[78]"></a>TIM_ICInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f0xx_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer15
</UL>

<P><STRONG><a name="[7b]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer17
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer16
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer6
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer15
</UL>

<P><STRONG><a name="[7f]"></a>TIM_OC1Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f0xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer17
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer16
</UL>

<P><STRONG><a name="[84]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer6
</UL>

<P><STRONG><a name="[9f]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a1]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a3]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a5]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[77]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer17
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer16
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer6
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer15
</UL>

<P><STRONG><a name="[25]"></a>USART1_IRQHandler</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART1_IRQHandler &rArr; i_serial_uart_rx_end &rArr; uart_rx_test_check &rArr; R_UART0_Send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_serial_uart_tx_end
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_serial_uart_rx_end
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>USART_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
</UL>

<P><STRONG><a name="[a6]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f0xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
</UL>

<P><STRONG><a name="[87]"></a>USART_ITConfig</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f0xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_UART0_Send
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
</UL>

<P><STRONG><a name="[86]"></a>USART_Init</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, stm32f0xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
</UL>

<P><STRONG><a name="[fc]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_speed
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart_fact
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_production_test
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_memory_handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ope_state_f
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_ope_main
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uart_error
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_20_99
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_190_255
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_180_189
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_170_179
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_160_169
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_120_159
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_110_119
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_100_109
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_0_9
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torque_tester_release_elec
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torque_tester_mode
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_torque_tester_mode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_tester_mode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_number_check
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sol_out_process
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_step_osikiri_open
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_step_osikiri_close
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_step_open
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_step_close
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_break_data
</UL>

<P><STRONG><a name="[12d]"></a>a_u1g_data_exchange0_word_to_byte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, a_deta_exchange.o(i.a_u1g_data_exchange0_word_to_byte))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset_main
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_fullclose_position
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_size_check_sum
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_size_check_sum
</UL>

<P><STRONG><a name="[12e]"></a>a_u1g_data_exchange1_word_to_byte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, a_deta_exchange.o(i.a_u1g_data_exchange1_word_to_byte))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset_main
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_fullclose_position
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_size_check_sum
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_size_check_sum
</UL>

<P><STRONG><a name="[a9]"></a>a_u2g_close_AD_exchange_to_Nm</STRONG> (Thumb, 182 bytes, Stack size 88 bytes, a_deta_exchange.o(i.a_u2g_close_AD_exchange_to_Nm))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_err_record
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal
</UL>

<P><STRONG><a name="[b7]"></a>a_u2g_close_Nm_exchange_to_AD</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, a_deta_exchange.o(i.a_u2g_close_Nm_exchange_to_AD))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = a_u2g_close_Nm_exchange_to_AD &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal
</UL>

<P><STRONG><a name="[b9]"></a>a_u2g_pulse_exchange_to_rotation</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, a_deta_exchange.o(i.a_u2g_pulse_exchange_to_rotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = a_u2g_pulse_exchange_to_rotation &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_err_record
</UL>

<P><STRONG><a name="[cf]"></a>a_vog_error_status_store</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.a_vog_error_status_store))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset_main
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_fullclose_position
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sol_short_error
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_power_on_rireki
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_in_motor_stop
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_lock_error_rireki
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_set_error_data
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_f_signal_rank_highest
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_f_signal_rank_high
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosei_culc_ver
</UL>

<P><STRONG><a name="[bc]"></a>a_vog_lock_cnt_poutput</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, a_lock_mode.o(i.a_vog_lock_cnt_poutput))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_mode_main
</UL>

<P><STRONG><a name="[ba]"></a>a_vog_lock_mode_main</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, a_lock_mode.o(i.a_vog_lock_mode_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a_vog_lock_mode_main &rArr; a_vog_lock_set_6minstop &rArr; soft_lock_error_rireki
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_cnt_poutput
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_select_max_duty_mode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_setf_lock_suspend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_set_swoff_stop
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_set_on_shortbreak
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_set_offshortbreak
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_set_delayend
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_set_6minstop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_set_5timesstop
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_restart_output
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_reset_5timesstop
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_cnt_toutput
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_check_lock_position
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[cc]"></a>a_vog_trqajst_dataset</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, trq_adjust_trqchange.o(i.a_vog_trqajst_dataset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = a_vog_trqajst_dataset
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_trqajst_trqinitial
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_torque_adjust
</UL>

<P><STRONG><a name="[cd]"></a>a_vog_trqajst_trqinitial</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, trq_adjust_trqchange.o(i.a_vog_trqajst_trqinitial))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ram_set
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_trqajst_dataset
</UL>

<P><STRONG><a name="[eb]"></a>ad_operate_main</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, overload.o(i.ad_operate_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ad_operate_main &rArr; ad_correct &rArr; capture_ad_start &rArr; R_ADC_Start &rArr; ADC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curr_lev_de
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_ver_value
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_temp_value
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_port_select
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_correct
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[e2]"></a>ad_start_set</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, overload.o(i.ad_start_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ad_start_set &rArr; select_ad_class
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ad_class
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_correct
</UL>

<P><STRONG><a name="[e4]"></a>adopt_data_num_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, overload.o(i.adopt_data_num_set))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_correct
</UL>

<P><STRONG><a name="[f2]"></a>after_learn_k</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, overload.o(i.after_learn_k))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = after_learn_k &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal_open
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosei_main
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_huka
</UL>

<P><STRONG><a name="[11e]"></a>anjou_test_initial</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, anjou_test.o(i.anjou_test_initial))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash_task
</UL>

<P><STRONG><a name="[f6]"></a>anjou_test_signal</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, anjou_test.o(i.anjou_test_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = anjou_test_signal &rArr; torque_tester_mode &rArr; trq_test_open_kahuka_wait &rArr; check_flash_learndata &rArr; data_read_flashmemory_h_size &rArr; get_storage_data
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torque_tester_release_elec
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torque_tester_mode
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_torque_tester_mode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_tester_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[fb]"></a>average_speed</STRONG> (Thumb, 370 bytes, Stack size 12 bytes, comm_uart.o(i.average_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = average_speed &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_production_test
</UL>

<P><STRONG><a name="[e6]"></a>bad_data_del</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, overload.o(i.bad_data_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bad_data_del
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cul_bad_data_del
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_correct
</UL>

<P><STRONG><a name="[1b9]"></a>break_port_set</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, motion_command.o(i.break_port_set))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_shortbreak
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_break
</UL>

<P><STRONG><a name="[104]"></a>calcu_std_huka</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, overload.o(i.calcu_std_huka))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal_open
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosei_main
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_open_u
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_close_u
</UL>

<P><STRONG><a name="[17d]"></a>calculate_error</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, overload.o(i.calculate_error))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_ope_main
</UL>

<P><STRONG><a name="[105]"></a>call_mode_process</STRONG> (Thumb, 480 bytes, Stack size 16 bytes, call_mode_process.o(i.call_mode_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = call_mode_process &rArr; current_mode_20_99 &rArr; process_short_open &rArr; process_open_u &rArr; mode_open_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_20_99
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_190_255
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_180_189
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_170_179
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_160_169
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_120_159
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_110_119
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_10_19
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_100_109
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_0_9
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[176]"></a>cansel_torque_tester_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, anjou_test.o(i.cansel_torque_tester_mode))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_torque_tester_mode
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecu_test_check
</UL>

<P><STRONG><a name="[e3]"></a>capture_ad_start</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, overload.o(i.capture_ad_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = capture_ad_start &rArr; R_ADC_Start &rArr; ADC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_correct
</UL>

<P><STRONG><a name="[194]"></a>check_ad_error_stop</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, overload.o(i.check_ad_error_stop))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[165]"></a>check_check_sum</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, main.o(i.check_check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ram_set
</UL>

<P><STRONG><a name="[111]"></a>check_count_reset</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, main.o(i.check_count_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_count_reset &rArr; a_vol_reset_upper_limit &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_jougen_count_clear
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_reset_upper_limit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_clear_upper_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[1cb]"></a>check_denki_test_exec</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, anjou_test.o(i.check_denki_test_exec))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sol_out_process
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osikiri_reset
</UL>

<P><STRONG><a name="[1d5]"></a>check_encoder_duty_stop_cancel</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tst_break.o(i.check_encoder_duty_stop_cancel))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_interval_check
</UL>

<P><STRONG><a name="[11a]"></a>check_flash_learndata</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, access_flash.o(i.check_flash_learndata))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = check_flash_learndata &rArr; data_read_flashmemory_h_size &rArr; get_storage_data
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_read_flashmemory_h_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_open_kahuka_wait
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_test_learn_check
</UL>

<P><STRONG><a name="[11c]"></a>check_flash_task</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, access_flash.o(i.check_flash_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = check_flash_task &rArr; write_data_number_check &rArr; store_storage_data &rArr; set_storage_data
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_startup
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anjou_test_initial
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_number_check
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_read_flashmemory_h_size
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_input_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[120]"></a>check_huka</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, overload.o(i.check_huka))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = check_huka &rArr; after_learn_k &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermal_check
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sikiiti_hosei
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huka_count_jump
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_learn_k
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[113]"></a>check_jougen_count_clear</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, main.o(i.check_jougen_count_clear))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_count_reset
</UL>

<P><STRONG><a name="[196]"></a>check_kamen_total</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, main.o(i.check_kamen_total))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[124]"></a>check_open_learn_error</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, main.o(i.check_open_learn_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_open_learn_error &rArr; set_error_open_learn_data &rArr; plus_a_cal_open &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_open_learn_data
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_ope_main
</UL>

<P><STRONG><a name="[126]"></a>check_open_learn_huka</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, call_mode_process.o(i.check_open_learn_huka))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = check_open_learn_huka &rArr; learn_data_make &rArr; make_std_learn &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_write_data
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_block_no_learn_ope
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_data_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_data_make
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[12a]"></a>check_pulse_event</STRONG> (Thumb, 764 bytes, Stack size 16 bytes, main.o(i.check_pulse_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_pulse_event &rArr; pulse_in_operation &rArr; plus_operate_main &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_in_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[12c]"></a>check_size_check_sum</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.check_size_check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_size_check_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u1g_data_exchange1_word_to_byte
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u1g_data_exchange0_word_to_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ram_set
</UL>

<P><STRONG><a name="[12f]"></a>check_sol_short_error</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, a_control_sol.o(i.check_sol_short_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_sol_short_error
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_error_status_store
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_ope_main
</UL>

<P><STRONG><a name="[130]"></a>check_t_break_main</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, tst_break.o(i.check_t_break_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = check_t_break_main &rArr; t_break_on &rArr; pwm_off_break_on_setting &rArr; R_TAU0_Channel6_Start &rArr; Init_Timer17 &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_break_on
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_on_break_off_setting
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_off_break_on_setting
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_off_break_off_setting
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_break_time
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_break_data
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_stop_pulse
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_break_step_change
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;break_step0_to_1
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;break_off_pwm_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_main
</UL>

<P><STRONG><a name="[f0]"></a>check_torque_test_exec</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, anjou_test.o(i.check_torque_test_exec))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_stop
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sol_out_process
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_port_select
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osikiri_reset
</UL>

<P><STRONG><a name="[de]"></a>clear_all_event_flags</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, select_signal.o(i.clear_all_event_flags))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_f_set_overload
</UL>

<P><STRONG><a name="[d7]"></a>close_block_ope</STRONG> (Thumb, 412 bytes, Stack size 0 bytes, overload.o(i.close_block_ope))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seprate_block
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_fullclose_learncondition_100
</UL>

<P><STRONG><a name="[1ba]"></a>close_end_port_set</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, motion_command.o(i.close_end_port_set))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_break
</UL>

<P><STRONG><a name="[147]"></a>close_kei_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, call_mode_process.o(i.close_kei_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = close_kei_set &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosei_main
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_close_u
</UL>

<P><STRONG><a name="[1bd]"></a>close_port_set</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, motion_command.o(i.close_port_set))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_close
</UL>

<P><STRONG><a name="[1be]"></a>close_startup_port_set</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, motion_command.o(i.close_startup_port_set))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_close_startup
</UL>

<P><STRONG><a name="[148]"></a>comm_uart</STRONG> (Thumb, 422 bytes, Stack size 8 bytes, comm_uart.o(i.comm_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = comm_uart &rArr; check_err_record &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_start
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_end
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_ans_wait
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_ans_check
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fact_set_tx
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart_fact
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_trns
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_shutter_move
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_err_record
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_UART0_Send
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_UART0_Receive
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[ed]"></a>curr_lev_de</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, overload.o(i.curr_lev_de))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = curr_lev_de &rArr; bousou_check &rArr; ope_key_stop &rArr; sw_in_end
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_get_data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bousou_check
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_operate_main
</UL>

<P><STRONG><a name="[106]"></a>current_mode_0_9</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, call_mode_process.o(i.current_mode_0_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = current_mode_0_9 &rArr; process_ready_open &rArr; process_close_u &rArr; mode_close_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_learn_data
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stop
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_osikiri_open
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_osikiri_close
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_open_u
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ready_open
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_mode_process
</UL>

<P><STRONG><a name="[109]"></a>current_mode_100_109</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, call_mode_process.o(i.current_mode_100_109))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = current_mode_100_109 &rArr; process_ready_open &rArr; process_close_u &rArr; mode_close_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seprate_block
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_learn_max_data
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stop
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_open_u
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_close_u
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ready_open
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_stop_102
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_fullclose_learncondition_100
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_mode_process
</UL>

<P><STRONG><a name="[107]"></a>current_mode_10_19</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, call_mode_process.o(i.current_mode_10_19))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = current_mode_10_19 &rArr; process_open_u &rArr; mode_open_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seprate_block
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stop
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_open_u
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_close_u
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_mode_process
</UL>

<P><STRONG><a name="[10a]"></a>current_mode_110_119</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, call_mode_process.o(i.current_mode_110_119))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = current_mode_110_119 &rArr; process_open_u &rArr; mode_open_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stop
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_shortbreak
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_osikiri_open
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_osikiri_close
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_open_u
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_mode_process
</UL>

<P><STRONG><a name="[10b]"></a>current_mode_120_159</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, call_mode_process.o(i.current_mode_120_159))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = current_mode_120_159 &rArr; process_ready_open &rArr; process_close_u &rArr; mode_close_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stop_lock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stop
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_open_u
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_close_u
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ready_open
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_position_130
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_position_128
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_mode_process
</UL>

<P><STRONG><a name="[10c]"></a>current_mode_160_169</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, call_mode_process.o(i.current_mode_160_169))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = current_mode_160_169 &rArr; process_open_u &rArr; mode_open_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stop
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_shortbreak
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_osikiri_open
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_osikiri_close
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_open_u
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_close_u
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_mode_process
</UL>

<P><STRONG><a name="[10d]"></a>current_mode_170_179</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, call_mode_process.o(i.current_mode_170_179))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = current_mode_170_179 &rArr; process_short_open &rArr; process_open_u &rArr; mode_open_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stop_lock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stop
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_open_u
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_short_open
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ready_open
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_mode_process
</UL>

<P><STRONG><a name="[10e]"></a>current_mode_180_189</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, call_mode_process.o(i.current_mode_180_189))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = current_mode_180_189 &rArr; process_open_u &rArr; mode_open_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stop
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_shortbreak
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_osikiri_open
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_osikiri_close
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_open_u
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_close_u
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_stop_180_183
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_mode_process
</UL>

<P><STRONG><a name="[10f]"></a>current_mode_190_255</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, call_mode_process.o(i.current_mode_190_255))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = current_mode_190_255 &rArr; process_ready_open &rArr; process_close_u &rArr; mode_close_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stop_lock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stop
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_open_u
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ready_open
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_position_199
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_mode_process
</UL>

<P><STRONG><a name="[108]"></a>current_mode_20_99</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, call_mode_process.o(i.current_mode_20_99))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = current_mode_20_99 &rArr; process_short_open &rArr; process_open_u &rArr; mode_open_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stop
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_osikiri_open
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_osikiri_close
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_open_u
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_close_u
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_short_open
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ready_open
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_mode_process
</UL>

<P><STRONG><a name="[164]"></a>data_ram_set</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, main.o(i.data_ram_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = data_ram_set &rArr; close_huka_data_set &rArr; make_std_learn &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_trqajst_trqinitial
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h_size_m_ck
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_size_check_sum
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_check_sum
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_huka_data_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_huka_data_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_set
</UL>

<P><STRONG><a name="[8f]"></a>delay_ms</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, sys.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_WriteOneByte
</UL>

<P><STRONG><a name="[56]"></a>delay_us</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, sys.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[177]"></a>ecu_test_main</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, ecu_test.o(i.ecu_test_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ecu_test_main &rArr; ecu_test_check &rArr; R_TAU0_Channel6_Start &rArr; Init_Timer17 &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_flag_all_clear
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_input_check
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecu_test_check
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecu_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[17b]"></a>error_ope_main</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, main.o(i.error_ope_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = error_ope_main &rArr; check_open_learn_error &rArr; set_error_open_learn_data &rArr; plus_a_cal_open &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sol_short_error
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_error
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_20_rireki_data
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_open_learn_error
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_unknown_posi_error
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uart_error
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_power_on_rireki
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset_main
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_fullclose_position
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[138]"></a>get_ecu_test_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ecu_test.o(i.get_ecu_test_state))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sol_ope_main
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_main
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ver_error
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_temp_error
</UL>

<P><STRONG><a name="[116]"></a>get_max_close_learn_data</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, overload.o(i.get_max_close_learn_data))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_err_record
</UL>

<P><STRONG><a name="[115]"></a>get_storage_data</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, storage.o(i.get_storage_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_storage_data
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_err_record
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_read_flashmemory_h_size
</UL>

<P><STRONG><a name="[166]"></a>h_size_m_ck</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, main.o(i.h_size_m_ck))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ram_set
</UL>

<P><STRONG><a name="[f3]"></a>hosei_main</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, overload.o(i.hosei_main))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_learn_max_data
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_kei_set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_kei_set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_learn_k
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcu_std_huka
</UL>

<P><STRONG><a name="[123]"></a>huka_count_jump</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, overload.o(i.huka_count_jump))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_huka
</UL>

<P><STRONG><a name="[ea]"></a>huka_lev_ver</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, overload.o(i.huka_lev_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = huka_lev_ver &rArr; hosei_culc_ver
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosei_culc_ver
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_hosei
</UL>

<P><STRONG><a name="[a7]"></a>i_serial_uart_rx_end</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, comm_uart.o(i.i_serial_uart_rx_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i_serial_uart_rx_end &rArr; uart_rx_test_check &rArr; R_UART0_Send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_test_check
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_recv_del
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_clear_rx_buf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uart_rx
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_UART0_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>i_serial_uart_tx_end</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, comm_uart.o(i.i_serial_uart_tx_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i_serial_uart_tx_end
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_UART0_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>initial_huka</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, initial.o(i.initial_huka))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initial_huka &rArr; learn_data_set
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variable_setup
</UL>

<P><STRONG><a name="[9c]"></a>int_input_encoder</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, encoder.o(i.int_input_encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = int_input_encoder &rArr; ope_pulse_count_main &rArr; zene_pulse_count &rArr; no_direct_p_in &rArr; ope_key_stop &rArr; sw_in_end
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ope_pulse_count_main
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_abnormal_pulse
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_pulse_width_to_rpm
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>int_system_timer</STRONG> (Thumb, 522 bytes, Stack size 0 bytes, timer.o(i.int_system_timer))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[1c5]"></a>kagen_reset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, encoder.o(i.kagen_reset))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_interval_check
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_direct_p_in
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermal_check
</UL>

<P><STRONG><a name="[187]"></a>key_f_set</STRONG> (Thumb, 634 bytes, Stack size 8 bytes, key_input.o(i.key_f_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = key_f_set &rArr; osikiri_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osikiri_reset
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sw_stop_tr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sw_reset
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_power_start_sw
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_any_key_input
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[d8]"></a>learn_data_make</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, overload.o(i.learn_data_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = learn_data_make &rArr; make_std_learn &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal_open
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_std_learn
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_open_learn_huka
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_fullclose_learncondition_100
</UL>

<P><STRONG><a name="[127]"></a>learn_data_set</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, overload.o(i.learn_data_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = learn_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_fullclose_position
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_open_learn_huka
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_huka
</UL>

<P><STRONG><a name="[d5]"></a>learn_fullclose_position</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, key_input.o(i.learn_fullclose_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = learn_fullclose_position &rArr; error_ope_main &rArr; check_open_learn_error &rArr; set_error_open_learn_data &rArr; plus_a_cal_open &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_write_data
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u1g_data_exchange1_word_to_byte
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u1g_data_exchange0_word_to_byte
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_ope_main
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_error_status_store
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_data_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_key_3sw
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_f_signal_rank_lower
</UL>

<P><STRONG><a name="[153]"></a>learn_get_data</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, overload.o(i.learn_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curr_lev_de
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; main_loop &rArr; call_mode_process &rArr; current_mode_20_99 &rArr; process_short_open &rArr; process_open_u &rArr; mode_open_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variable_setup
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_WDT_Restart
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer6
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer15
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IWDG
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gpio
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Delay
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Adc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1dc]"></a>make_check_sum</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, access_flash.o(i.make_check_sum))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_write_data
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_flash_learndata
</UL>

<P><STRONG><a name="[19e]"></a>make_section</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, overload.o(i.make_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = make_section &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[1a2]"></a>make_size_check_sum</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, access_flash.o(i.make_size_check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = make_size_check_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u1g_data_exchange1_word_to_byte
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u1g_data_exchange0_word_to_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_write_data
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_flash_learndata
</UL>

<P><STRONG><a name="[146]"></a>make_std_learn</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, overload.o(i.make_std_learn))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = make_std_learn &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_huka_data_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_data_make
</UL>

<P><STRONG><a name="[1a3]"></a>mode_close_u</STRONG> (Thumb, 366 bytes, Stack size 8 bytes, mode_process.o(i.mode_close_u))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mode_close_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_soft_close
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_close_startup
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_close
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_break
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcu_std_huka
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_step_close
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_close_u
</UL>

<P><STRONG><a name="[1a9]"></a>mode_open_u</STRONG> (Thumb, 366 bytes, Stack size 8 bytes, mode_process.o(i.mode_open_u))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mode_open_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_soft_open
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_open_startup
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_open
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_break
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcu_std_huka
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_step_open
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_open_u
</UL>

<P><STRONG><a name="[1ae]"></a>mode_osikiri_close</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, mode_process.o(i.mode_osikiri_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mode_osikiri_close &rArr; select_step_osikiri_close &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_soft_close
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_close_startup
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_close
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_break
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_step_osikiri_close
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_osikiri_close
</UL>

<P><STRONG><a name="[1b0]"></a>mode_osikiri_open</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, mode_process.o(i.mode_osikiri_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mode_osikiri_open &rArr; select_step_osikiri_open &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_soft_open
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_open_startup
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_open
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_break
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_step_osikiri_open
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_osikiri_open
</UL>

<P><STRONG><a name="[1b2]"></a>mode_shortbreak</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, mode_process.o(i.mode_shortbreak))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mode_shortbreak &rArr; motion_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_stop
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_shortbreak
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_shortbreak
</UL>

<P><STRONG><a name="[1b5]"></a>mode_stop</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, mode_process.o(i.mode_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mode_stop &rArr; motion_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_torque_test_exec
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_stop
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_break
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_step_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stop
</UL>

<P><STRONG><a name="[1b7]"></a>mode_wait_lock</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, mode_process.o(i.mode_wait_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mode_wait_lock &rArr; motion_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_stop
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_close_startup
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_step_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stop_lock
</UL>

<P><STRONG><a name="[1a5]"></a>motion_break</STRONG> (Thumb, 234 bytes, Stack size 4 bytes, motion_command.o(i.motion_break))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = motion_break
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_start
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_check
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_end_port_set
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_end_port_set
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;break_port_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_stop
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_osikiri_open
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_osikiri_close
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_open_u
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_close_u
</UL>

<P><STRONG><a name="[1a8]"></a>motion_close</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, motion_command.o(i.motion_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = motion_close
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_start
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_check
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_port_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_osikiri_close
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_close_u
</UL>

<P><STRONG><a name="[1a6]"></a>motion_close_startup</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, motion_command.o(i.motion_close_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = motion_close_startup
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_start
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_check
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_startup_port_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_wait_lock
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_osikiri_close
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_close_u
</UL>

<P><STRONG><a name="[1ad]"></a>motion_open</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, motion_command.o(i.motion_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = motion_open
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_start
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_check
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_port_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_osikiri_open
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_open_u
</UL>

<P><STRONG><a name="[1ab]"></a>motion_open_startup</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, motion_command.o(i.motion_open_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = motion_open_startup
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_start
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_check
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_startup_port_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_osikiri_open
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_open_u
</UL>

<P><STRONG><a name="[1b3]"></a>motion_shortbreak</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, motion_command.o(i.motion_shortbreak))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = motion_shortbreak
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_start
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_check
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;break_port_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_shortbreak
</UL>

<P><STRONG><a name="[1a7]"></a>motion_soft_close</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, motion_command.o(i.motion_soft_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = motion_soft_close
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_start
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_check
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_close_port_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_osikiri_close
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_close_u
</UL>

<P><STRONG><a name="[1ac]"></a>motion_soft_open</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, motion_command.o(i.motion_soft_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = motion_soft_open
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_start
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_check
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_open_port_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_osikiri_open
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_open_u
</UL>

<P><STRONG><a name="[1b4]"></a>motion_stop</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, motion_command.o(i.motion_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = motion_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_start
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_motion_check
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_port_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_wait_lock
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_stop
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_shortbreak
</UL>

<P><STRONG><a name="[d0]"></a>ope_key_stop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, select_signal.o(i.ope_key_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ope_key_stop &rArr; sw_in_end
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_in_end
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_interval_check
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_direct_p_in
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_f_signal_rank_high
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thermal_check
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bousou_check
</UL>

<P><STRONG><a name="[128]"></a>open_block_no_learn_ope</STRONG> (Thumb, 396 bytes, Stack size 8 bytes, overload.o(i.open_block_no_learn_ope))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = open_block_no_learn_ope
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_open_learn_huka
</UL>

<P><STRONG><a name="[1e1]"></a>open_block_ope</STRONG> (Thumb, 436 bytes, Stack size 8 bytes, overload.o(i.open_block_ope))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = open_block_ope
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seprate_block
</UL>

<P><STRONG><a name="[1b8]"></a>open_end_port_set</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, motion_command.o(i.open_end_port_set))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_break
</UL>

<P><STRONG><a name="[1ca]"></a>open_kei_set</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, call_mode_process.o(i.open_kei_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = open_kei_set &rArr; plus_a_cal_open &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal_open
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosei_main
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_open_u
</UL>

<P><STRONG><a name="[1bf]"></a>open_port_set</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, motion_command.o(i.open_port_set))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_open
</UL>

<P><STRONG><a name="[1c0]"></a>open_startup_port_set</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, motion_command.o(i.open_startup_port_set))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_open_startup
</UL>

<P><STRONG><a name="[d1]"></a>osikiri_reset</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, key_input.o(i.osikiri_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osikiri_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_torque_test_exec
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_denki_test_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_f_set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_f_signal_rank_highest
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_f_signal_rank_high
</UL>

<P><STRONG><a name="[19f]"></a>output_main</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, main.o(i.output_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = output_main &rArr; check_t_break_main &rArr; t_break_on &rArr; pwm_off_break_on_setting &rArr; R_TAU0_Channel6_Start &rArr; Init_Timer17 &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_flag_all_clear
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_d_pwm
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ecu_test_state
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_t_break_main
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel6_Stop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel4_Stop
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel4_Start
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pwm_limit_filter
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_break_enable_time
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[f5]"></a>plus_a_cal</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, overload.o(i.plus_a_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_AD_exchange_to_Nm
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_Nm_exchange_to_AD
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_std_learn
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_kei_set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_learn_k
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcu_std_huka
</UL>

<P><STRONG><a name="[f4]"></a>plus_a_cal_open</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, overload.o(i.plus_a_cal_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = plus_a_cal_open &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_error_open_learn_data
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_huka_data_set
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_learn_max_data
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_data_make
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_kei_set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_learn_k
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcu_std_huka
</UL>

<P><STRONG><a name="[15c]"></a>process_close_u</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, call_mode_process.o(i.process_close_u))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = process_close_u &rArr; mode_close_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_close_u
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_kei_set
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_20_99
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_180_189
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_160_169
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_120_159
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_10_19
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_100_109
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ready_open
</UL>

<P><STRONG><a name="[197]"></a>process_key_3sw</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.process_key_3sw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = process_key_3sw &rArr; learn_fullclose_position &rArr; error_ope_main &rArr; check_open_learn_error &rArr; set_error_open_learn_data &rArr; plus_a_cal_open &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset_main
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_fullclose_position
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[156]"></a>process_open_u</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, call_mode_process.o(i.process_open_u))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = process_open_u &rArr; mode_open_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_open_u
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_kei_set
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_20_99
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_190_255
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_180_189
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_170_179
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_160_169
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_120_159
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_110_119
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_10_19
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_100_109
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_0_9
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_short_open
</UL>

<P><STRONG><a name="[158]"></a>process_osikiri_close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, call_mode_process.o(i.process_osikiri_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = process_osikiri_close &rArr; mode_osikiri_close &rArr; select_step_osikiri_close &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_osikiri_close
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_20_99
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_180_189
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_160_169
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_110_119
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_0_9
</UL>

<P><STRONG><a name="[157]"></a>process_osikiri_open</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, call_mode_process.o(i.process_osikiri_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = process_osikiri_open &rArr; mode_osikiri_open &rArr; select_step_osikiri_open &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_osikiri_open
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_20_99
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_180_189
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_160_169
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_110_119
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_0_9
</UL>

<P><STRONG><a name="[15d]"></a>process_shortbreak</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, call_mode_process.o(i.process_shortbreak))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = process_shortbreak &rArr; mode_shortbreak &rArr; motion_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_shortbreak
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_180_189
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_160_169
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_110_119
</UL>

<P><STRONG><a name="[155]"></a>process_stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, call_mode_process.o(i.process_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = process_stop &rArr; mode_stop &rArr; motion_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_20_99
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_190_255
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_180_189
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_170_179
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_160_169
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_120_159
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_110_119
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_10_19
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_100_109
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_0_9
</UL>

<P><STRONG><a name="[15e]"></a>process_stop_lock</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, call_mode_process.o(i.process_stop_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = process_stop_lock &rArr; mode_wait_lock &rArr; motion_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_wait_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_190_255
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_170_179
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_120_159
</UL>

<P><STRONG><a name="[12b]"></a>pulse_in_operation</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, encoder.o(i.pulse_in_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pulse_in_operation &rArr; plus_operate_main &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_operate_main
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_in_motor_stop
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_output_ope
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pulse_event
</UL>

<P><STRONG><a name="[195]"></a>pulse_interval_check</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, encoder.o(i.pulse_interval_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pulse_interval_check &rArr; ope_key_stop &rArr; sw_in_end
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ope_key_stop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_encoder_duty_stop_cancel
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kagen_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[d9]"></a>ready_write_data</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, access_flash.o(i.ready_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ready_write_data &rArr; make_size_check_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_size_check_sum
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_fullclose_position
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_open_learn_huka
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_open_learn_error
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_fullclose_learncondition_100
</UL>

<P><STRONG><a name="[1de]"></a>reset_flash_learndata</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, access_flash.o(i.reset_flash_learndata))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reset_flash_learndata &rArr; make_size_check_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_size_check_sum
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_start
</UL>

<P><STRONG><a name="[154]"></a>reset_learn_data</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, overload.o(i.reset_learn_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reset_learn_data
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_0_9
</UL>

<P><STRONG><a name="[1e9]"></a>reset_system_timer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.reset_system_timer))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_in_end
</UL>

<P><STRONG><a name="[145]"></a>rest_ready_write_data</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, access_flash.o(i.rest_ready_write_data))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset_main
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_huka_data_set
</UL>

<P><STRONG><a name="[e5]"></a>rest_startup</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, initial.o(i.rest_startup))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash_task
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_correct
</UL>

<P><STRONG><a name="[18f]"></a>ret_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.ret_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ret_set &rArr; data_ram_set &rArr; close_huka_data_set &rArr; make_std_learn &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ram_set
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[f1]"></a>select_ad_class</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, adc.o(i.select_ad_class))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = select_ad_class
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_start_set
</UL>

<P><STRONG><a name="[15b]"></a>select_learn_max_data</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, overload.o(i.select_learn_max_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = select_learn_max_data &rArr; plus_a_cal_open &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal_open
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosei_main
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_100_109
</UL>

<P><STRONG><a name="[19a]"></a>select_mode</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, select_mode.o(i.select_mode))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[199]"></a>select_signal</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, select_signal.o(i.select_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = select_signal &rArr; a_vol_check_f_signal_rank_lower &rArr; learn_fullclose_position &rArr; error_ope_main &rArr; check_open_learn_error &rArr; set_error_open_learn_data &rArr; plus_a_cal_open &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_f_set_overload
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_f_signal_rank_lower
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_f_signal_rank_low
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_f_signal_rank_highest
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_f_signal_rank_high
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[1a4]"></a>select_step_close</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, mode_process.o(i.select_step_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = select_step_close &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_close_u
</UL>

<P><STRONG><a name="[1aa]"></a>select_step_open</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, mode_process.o(i.select_step_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = select_step_open &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_open_u
</UL>

<P><STRONG><a name="[1af]"></a>select_step_osikiri_close</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, mode_process.o(i.select_step_osikiri_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = select_step_osikiri_close &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_osikiri_close
</UL>

<P><STRONG><a name="[1b1]"></a>select_step_osikiri_open</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, mode_process.o(i.select_step_osikiri_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = select_step_osikiri_open &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_osikiri_open
</UL>

<P><STRONG><a name="[1b6]"></a>select_step_stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mode_process.o(i.select_step_stop))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_wait_lock
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_stop
</UL>

<P><STRONG><a name="[15a]"></a>seprate_block</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, overload.o(i.seprate_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = seprate_block &rArr; open_block_ope
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_block_ope
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_block_ope
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_10_19
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_100_109
</UL>

<P><STRONG><a name="[17e]"></a>set_20_rireki_data</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, main.o(i.set_20_rireki_data))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_ope_main
</UL>

<P><STRONG><a name="[da]"></a>set_close_huka</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, call_mode_process.o(i.set_close_huka))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_learn_condition_at_102
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_fullclose_learncondition_100
</UL>

<P><STRONG><a name="[1cc]"></a>set_d_pwm</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, encoder.o(i.set_d_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_d_pwm &rArr; set_pwm_d
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pwm_d
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_main
</UL>

<P><STRONG><a name="[125]"></a>set_error_open_learn_data</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, overload.o(i.set_error_open_learn_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_error_open_learn_data &rArr; plus_a_cal_open &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal_open
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_open_learn_error
</UL>

<P><STRONG><a name="[19b]"></a>set_ope_state_f</STRONG> (Thumb, 130 bytes, Stack size 4 bytes, main.o(i.set_ope_state_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_ope_state_f &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[1cd]"></a>set_pwm_limit_filter</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(i.set_pwm_limit_filter))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_main
</UL>

<P><STRONG><a name="[1e8]"></a>set_strg_mem_command</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, storage.o(i.set_strg_mem_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_strg_mem_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_storage_data
</UL>

<P><STRONG><a name="[121]"></a>sikiiti_hosei</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, overload.o(i.sikiiti_hosei))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_huka
</UL>

<P><STRONG><a name="[1c1]"></a>soft_close_port_set</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, motion_command.o(i.soft_close_port_set))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_soft_close
</UL>

<P><STRONG><a name="[1c2]"></a>soft_open_port_set</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, motion_command.o(i.soft_open_port_set))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_soft_open
</UL>

<P><STRONG><a name="[1d3]"></a>soft_reset_main</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, key_input.o(i.soft_reset_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = soft_reset_main &rArr; error_ope_main &rArr; check_open_learn_error &rArr; set_error_open_learn_data &rArr; plus_a_cal_open &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_ready_write_data
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u1g_data_exchange1_word_to_byte
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u1g_data_exchange0_word_to_byte
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_ope_main
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_error_status_store
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_key_3sw
</UL>

<P><STRONG><a name="[19d]"></a>sol_ope_main</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, a_control_sol.o(i.sol_ope_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sol_ope_main &rArr; sol_out_process &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ecu_test_state
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sol_out_process
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[b0]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sqrt &rArr; _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_AD_exchange_to_Nm
</UL>

<P><STRONG><a name="[1d4]"></a>state_output_ope</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, encoder.o(i.state_output_ope))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = state_output_ope
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_num_cont
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_in_operation
</UL>

<P><STRONG><a name="[1c3]"></a>stop_port_set</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, motion_command.o(i.stop_port_set))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_stop
</UL>

<P><STRONG><a name="[18c]"></a>storage_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, storage.o(i.storage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = storage_init &rArr; read_storage_all &rArr; M24C16_Read &rArr; M24C16_ReadOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_M24C16
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_storage_all
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19c]"></a>storage_memory_handler</STRONG> (Thumb, 1406 bytes, Stack size 8 bytes, storage.o(i.storage_memory_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = storage_memory_handler &rArr; M24C16_Write &rArr; M24C16_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_Write
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_Read
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[1e6]"></a>store_storage_data</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, storage.o(i.store_storage_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = store_storage_data &rArr; set_storage_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_strg_mem_command
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_storage_data
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_number_check
</UL>

<P><STRONG><a name="[1c6]"></a>sw_in_end</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, encoder.o(i.sw_in_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sw_in_end
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_system_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ope_key_stop
</UL>

<P><STRONG><a name="[191]"></a>sw_input_check</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, key_input.o(i.sw_input_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sw_input_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_off_count
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_in_count
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_all_off_ope
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_close_production_test
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[17a]"></a>t_flag_all_clear</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tst_break.o(i.t_flag_all_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = t_flag_all_clear &rArr; R_TAU0_Channel6_Stop &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel6_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecu_test_main
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_main
</UL>

<P><STRONG><a name="[122]"></a>thermal_check</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, overload.o(i.thermal_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = thermal_check &rArr; ope_key_stop &rArr; sw_in_end
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ope_key_stop
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kagen_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_huka
</UL>

<P><STRONG><a name="[169]"></a>uart_fact_elec_test</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, comm_uart.o(i.uart_fact_elec_test))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_test_learn_check
</UL>

<P><STRONG><a name="[1f6]"></a>uart_fact_trq_test</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, comm_uart.o(i.uart_fact_trq_test))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_start
</UL>

<P><STRONG><a name="[1a1]"></a>uart_production_test</STRONG> (Thumb, 808 bytes, Stack size 8 bytes, comm_uart.o(i.uart_production_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_production_test &rArr; R_UART0_Send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_speed
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_UART0_Send
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_UART0_Receive
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[180]"></a>uart_recv_del</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, comm_uart.o(i.uart_recv_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_recv_del
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_UART0_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_serial_uart_rx_end
</UL>

<P><STRONG><a name="[182]"></a>uart_rx_test_check</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, comm_uart.o(i.uart_rx_test_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_rx_test_check &rArr; R_UART0_Send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_UART0_Send
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_UART0_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_serial_uart_rx_end
</UL>

<P><STRONG><a name="[18d]"></a>variable_setup</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, initial.o(i.variable_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = variable_setup &rArr; initial_huka &rArr; learn_data_set
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_huka
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bc]"></a>wait_motion_check</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, motion_command.o(i.wait_motion_check))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_stop
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_soft_open
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_soft_close
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_shortbreak
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_open_startup
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_open
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_close_startup
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_close
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_break
</UL>

<P><STRONG><a name="[1bb]"></a>wait_motion_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motion_command.o(i.wait_motion_start))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_stop
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_soft_open
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_soft_close
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_shortbreak
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_open_startup
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_open
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_close_startup
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_close
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motion_break
</UL>

<P><STRONG><a name="[11d]"></a>write_data_number_check</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, access_flash.o(i.write_data_number_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = write_data_number_check &rArr; store_storage_data &rArr; set_storage_data
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_storage_data
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash_task
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_Nm_exchange_to_AD
</UL>

<P><STRONG><a name="[1fa]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_AD_exchange_to_Nm
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_Nm_exchange_to_AD
</UL>

<P><STRONG><a name="[1fc]"></a>_fcmple</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_pulse_exchange_to_rotation
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_AD_exchange_to_Nm
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_Nm_exchange_to_AD
</UL>

<P><STRONG><a name="[23a]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[b4]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_AD_exchange_to_Nm
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_Nm_exchange_to_AD
</UL>

<P><STRONG><a name="[1fd]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_AD_exchange_to_Nm
</UL>

<P><STRONG><a name="[1fe]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9b]"></a>SetSysClock_HSI</STRONG> (Thumb, 184 bytes, Stack size 12 bytes, system_stm32f0xx.o(i.SetSysClock_HSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock_HSI
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[9e]"></a>TI1_Config</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f0xx_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a0]"></a>TI2_Config</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f0xx_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a2]"></a>TI3_Config</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, stm32f0xx_tim.o(i.TI3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TI3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a4]"></a>TI4_Config</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f0xx_tim.o(i.TI4_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1a0]"></a>a_vol_clear_reset_command</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, main.o(i.a_vol_clear_reset_command))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[112]"></a>a_vol_clear_upper_limit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.a_vol_clear_upper_limit))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_count_reset
</UL>

<P><STRONG><a name="[190]"></a>a_vol_motor_huka_setting</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.a_vol_motor_huka_setting))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[df]"></a>a_vol_reset_upper_limit</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, main.o(i.a_vol_reset_upper_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a_vol_reset_upper_limit &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_count_reset
</UL>

<P><STRONG><a name="[1ce]"></a>check_break_enable_time</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.check_break_enable_time))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_main
</UL>

<P><STRONG><a name="[193]"></a>check_break_stop</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, main.o(i.check_break_stop))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[192]"></a>check_error_clear</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, main.o(i.check_error_clear))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[129]"></a>check_power_on_rireki</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, main.o(i.check_power_on_rireki))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = check_power_on_rireki
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_error_status_store
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_ope_main
</UL>

<P><STRONG><a name="[13d]"></a>check_uart_error</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, main.o(i.check_uart_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_uart_error &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_ope_main
</UL>

<P><STRONG><a name="[17c]"></a>check_unknown_posi_error</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(i.check_unknown_posi_error))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_ope_main
</UL>

<P><STRONG><a name="[144]"></a>close_huka_data_set</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, main.o(i.close_huka_data_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = close_huka_data_set &rArr; make_std_learn &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_ready_write_data
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_std_learn
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ram_set
</UL>

<P><STRONG><a name="[18e]"></a>main_loop</STRONG> (Thumb, 344 bytes, Stack size 8 bytes, main.o(i.main_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main_loop &rArr; call_mode_process &rArr; current_mode_20_99 &rArr; process_short_open &rArr; process_open_u &rArr; mode_open_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_production_test
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_input_check
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_memory_handler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sol_ope_main
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_signal
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_mode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_startup
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_interval_check
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_section
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_f_set
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecu_test_main
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_open_learn_huka
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_huka
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash_task
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ad_error_stop
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_mode_process
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anjou_test_signal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_operate_main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_mode_main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_WDT_Restart
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ope_state_f
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_set
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_key_3sw
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_main
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_ope_main
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pulse_event
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_kamen_total
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_count_reset
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_lock_signal
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_error_clear
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_break_stop
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_motor_huka_setting
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_clear_reset_command
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>open_huka_data_set</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, main.o(i.open_huka_data_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = open_huka_data_set &rArr; plus_a_cal_open &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plus_a_cal_open
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ram_set
</UL>

<P><STRONG><a name="[198]"></a>soft_lock_signal</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.soft_lock_signal))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[62]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, adc.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Adc
</UL>

<P><STRONG><a name="[114]"></a>check_err_record</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, comm_uart.o(i.check_err_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = check_err_record &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_storage_data
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_close_learn_data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_pulse_exchange_to_rotation
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2g_close_AD_exchange_to_Nm
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_err_record
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart
</UL>

<P><STRONG><a name="[1f9]"></a>check_error</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, comm_uart.o(i.check_error))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_value_change
</UL>

<P><STRONG><a name="[118]"></a>check_error_change</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, comm_uart.o(i.check_error_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_error_change &rArr; update_error_trns &rArr; uart_set_trans &rArr; reserve_uart_trns
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_error_trns
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_trns
</UL>

<P><STRONG><a name="[149]"></a>check_shutter_move</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, comm_uart.o(i.check_shutter_move))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart
</UL>

<P><STRONG><a name="[1f7]"></a>check_uart_retry</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, comm_uart.o(i.check_uart_retry))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_ans_wait
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_ans_check
</UL>

<P><STRONG><a name="[181]"></a>check_uart_rx</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, comm_uart.o(i.check_uart_rx))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_serial_uart_rx_end
</UL>

<P><STRONG><a name="[13e]"></a>check_update_trns</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, comm_uart.o(i.check_update_trns))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = check_update_trns &rArr; check_error_change &rArr; update_error_trns &rArr; uart_set_trans &rArr; reserve_uart_trns
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_value_change
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_trans
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_check_key
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_uart_trns
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_error_change
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart
</UL>

<P><STRONG><a name="[150]"></a>comm_uart_fact</STRONG> (Thumb, 606 bytes, Stack size 8 bytes, comm_uart.o(i.comm_uart_fact))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = comm_uart_fact &rArr; uart_fact_set_tx &rArr; uart_tx_start &rArr; R_UART0_Send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_ans_wait
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_ans_check
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fact_wait_trans_end
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fact_wait_connect
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fact_set_tx
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart
</UL>

<P><STRONG><a name="[142]"></a>reserve_uart_trns</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, comm_uart.o(i.reserve_uart_trns))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reserve_uart_trns
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_update_tx_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_error_trns
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_trans
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_trns
</UL>

<P><STRONG><a name="[117]"></a>set_err_record</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, comm_uart.o(i.set_err_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_err_record
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_err_record
</UL>

<P><STRONG><a name="[13f]"></a>uart_check_key</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, comm_uart.o(i.uart_check_key))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_trns
</UL>

<P><STRONG><a name="[183]"></a>uart_clear_rx_buf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, comm_uart.o(i.uart_clear_rx_buf))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_serial_uart_rx_end
</UL>

<P><STRONG><a name="[1f8]"></a>uart_clear_tx_ans</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comm_uart.o(i.uart_clear_tx_ans))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_ans_check
</UL>

<P><STRONG><a name="[14f]"></a>uart_fact_set_tx</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, comm_uart.o(i.uart_fact_set_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_fact_set_tx &rArr; uart_tx_start &rArr; R_UART0_Send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_start
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart_fact
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart
</UL>

<P><STRONG><a name="[152]"></a>uart_fact_wait_connect</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, comm_uart.o(i.uart_fact_wait_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_fact_wait_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart_fact
</UL>

<P><STRONG><a name="[151]"></a>uart_fact_wait_trans_end</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, comm_uart.o(i.uart_fact_wait_trans_end))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart_fact
</UL>

<P><STRONG><a name="[141]"></a>uart_set_trans</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, comm_uart.o(i.uart_set_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_set_trans &rArr; reserve_uart_trns
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_uart_trns
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_error_trns
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_trns
</UL>

<P><STRONG><a name="[14e]"></a>uart_tx_ans_check</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, comm_uart.o(i.uart_tx_ans_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_tx_ans_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_clear_tx_ans
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uart_retry
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart_fact
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart
</UL>

<P><STRONG><a name="[14d]"></a>uart_tx_ans_wait</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, comm_uart.o(i.uart_tx_ans_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_tx_ans_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uart_retry
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart_fact
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart
</UL>

<P><STRONG><a name="[14c]"></a>uart_tx_end</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, comm_uart.o(i.uart_tx_end))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart
</UL>

<P><STRONG><a name="[14b]"></a>uart_tx_start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, comm_uart.o(i.uart_tx_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_tx_start &rArr; R_UART0_Send &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_UART0_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fact_set_tx
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_uart
</UL>

<P><STRONG><a name="[1dd]"></a>uart_update_tx_buf</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, comm_uart.o(i.uart_update_tx_buf))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_uart_trns
</UL>

<P><STRONG><a name="[140]"></a>uart_value_change</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, comm_uart.o(i.uart_value_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_value_change
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_error
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_error_trns
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_update_trns
</UL>

<P><STRONG><a name="[119]"></a>update_error_trns</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, comm_uart.o(i.update_error_trns))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = update_error_trns &rArr; uart_set_trans &rArr; reserve_uart_trns
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_value_change
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_trans
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_uart_trns
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_error_change
</UL>

<P><STRONG><a name="[1d7]"></a>read_storage_all</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, storage.o(i.read_storage_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = read_storage_all &rArr; M24C16_Read &rArr; M24C16_ReadOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24C16_Read
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_WDT_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_init
</UL>

<P><STRONG><a name="[1e7]"></a>set_storage_data</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, storage.o(i.set_storage_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_storage_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_storage_data
</UL>

<P><STRONG><a name="[1e3]"></a>sol_out_process</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, a_control_sol.o(i.sol_out_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sol_out_process &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_torque_test_exec
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_denki_test_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sol_ope_main
</UL>

<P><STRONG><a name="[ca]"></a>a_u2l_p_check</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, a_lock_mode.o(i.a_u2l_p_check))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_set_offshortbreak
</UL>

<P><STRONG><a name="[bb]"></a>a_vog_check_lock_position</STRONG> (Thumb, 532 bytes, Stack size 0 bytes, a_lock_mode.o(i.a_vog_check_lock_position))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_mode_main
</UL>

<P><STRONG><a name="[bd]"></a>a_vog_lock_cnt_toutput</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, a_lock_mode.o(i.a_vog_lock_cnt_toutput))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_mode_main
</UL>

<P><STRONG><a name="[c2]"></a>a_vog_lock_reset_5timesstop</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, a_lock_mode.o(i.a_vog_lock_reset_5timesstop))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_mode_main
</UL>

<P><STRONG><a name="[bf]"></a>a_vog_lock_restart_output</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, a_lock_mode.o(i.a_vog_lock_restart_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = a_vog_lock_restart_output
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_lock_set_thresh_pout
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_mode_main
</UL>

<P><STRONG><a name="[c1]"></a>a_vog_lock_set_5timesstop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, a_lock_mode.o(i.a_vog_lock_set_5timesstop))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_mode_main
</UL>

<P><STRONG><a name="[c0]"></a>a_vog_lock_set_6minstop</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, a_lock_mode.o(i.a_vog_lock_set_6minstop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = a_vog_lock_set_6minstop &rArr; soft_lock_error_rireki
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_lock_error_rireki
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_mode_main
</UL>

<P><STRONG><a name="[c3]"></a>a_vog_lock_set_delayend</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, a_lock_mode.o(i.a_vog_lock_set_delayend))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_mode_main
</UL>

<P><STRONG><a name="[c4]"></a>a_vog_lock_set_offshortbreak</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, a_lock_mode.o(i.a_vog_lock_set_offshortbreak))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = a_vog_lock_set_offshortbreak
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_u2l_p_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_mode_main
</UL>

<P><STRONG><a name="[c5]"></a>a_vog_lock_set_on_shortbreak</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, a_lock_mode.o(i.a_vog_lock_set_on_shortbreak))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_mode_main
</UL>

<P><STRONG><a name="[c6]"></a>a_vog_lock_set_swoff_stop</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, a_lock_mode.o(i.a_vog_lock_set_swoff_stop))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_mode_main
</UL>

<P><STRONG><a name="[be]"></a>a_vog_lock_setf_lock_suspend</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, a_lock_mode.o(i.a_vog_lock_setf_lock_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = a_vog_lock_setf_lock_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_lock_store_maxload
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_mode_main
</UL>

<P><STRONG><a name="[c7]"></a>a_vog_select_max_duty_mode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, a_lock_mode.o(i.a_vog_select_max_duty_mode))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_mode_main
</UL>

<P><STRONG><a name="[c8]"></a>a_vol_lock_set_thresh_pout</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, a_lock_mode.o(i.a_vol_lock_set_thresh_pout))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_restart_output
</UL>

<P><STRONG><a name="[cb]"></a>a_vol_lock_store_maxload</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, a_lock_mode.o(i.a_vol_lock_store_maxload))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_setf_lock_suspend
</UL>

<P><STRONG><a name="[c9]"></a>soft_lock_error_rireki</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, a_lock_mode.o(i.soft_lock_error_rireki))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = soft_lock_error_rireki
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_error_status_store
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_lock_set_6minstop
</UL>

<P><STRONG><a name="[11f]"></a>SW_input_cancel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, access_flash.o(i.SW_input_cancel))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash_task
</UL>

<P><STRONG><a name="[11b]"></a>data_read_flashmemory_h_size</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, access_flash.o(i.data_read_flashmemory_h_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = data_read_flashmemory_h_size &rArr; get_storage_data
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_storage_data
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash_task
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash_learndata
</UL>

<P><STRONG><a name="[13b]"></a>change_tester_mode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, anjou_test.o(i.change_tester_mode))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_mode_change
</UL>

<P><STRONG><a name="[139]"></a>check_test_mode_change</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, anjou_test.o(i.check_test_mode_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_test_mode_change
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_mode_stop_in_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_tester_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torque_tester_mode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_tester_mode
</UL>

<P><STRONG><a name="[13a]"></a>check_test_mode_stop_in_wait</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, anjou_test.o(i.check_test_mode_stop_in_wait))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_mode_change
</UL>

<P><STRONG><a name="[13c]"></a>check_torque_adjust</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, anjou_test.o(i.check_torque_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_torque_adjust &rArr; a_vog_trqajst_dataset
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_trqajst_dataset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_open_trq_adjust
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_close_trq_adjust
</UL>

<P><STRONG><a name="[16b]"></a>denki_test_100v_wait</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, anjou_test.o(i.denki_test_100v_wait))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_tester_mode
</UL>

<P><STRONG><a name="[170]"></a>denki_test_close_stop_wait</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, anjou_test.o(i.denki_test_close_stop_wait))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_tester_mode
</UL>

<P><STRONG><a name="[16f]"></a>denki_test_close_vib_check</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, anjou_test.o(i.denki_test_close_vib_check))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_tester_mode
</UL>

<P><STRONG><a name="[171]"></a>denki_test_encoder_check</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, anjou_test.o(i.denki_test_encoder_check))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_tester_mode
</UL>

<P><STRONG><a name="[168]"></a>denki_test_learn_check</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, anjou_test.o(i.denki_test_learn_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = denki_test_learn_check &rArr; check_flash_learndata &rArr; data_read_flashmemory_h_size &rArr; get_storage_data
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fact_elec_test
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash_learndata
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_tester_mode
</UL>

<P><STRONG><a name="[172]"></a>denki_test_learn_stop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, anjou_test.o(i.denki_test_learn_stop))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_tester_mode
</UL>

<P><STRONG><a name="[16e]"></a>denki_test_open_stop_wait</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, anjou_test.o(i.denki_test_open_stop_wait))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_tester_mode
</UL>

<P><STRONG><a name="[16d]"></a>denki_test_open_vib_check</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, anjou_test.o(i.denki_test_open_vib_check))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_tester_mode
</UL>

<P><STRONG><a name="[16c]"></a>denki_test_power_check_wait</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, anjou_test.o(i.denki_test_power_check_wait))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_tester_mode
</UL>

<P><STRONG><a name="[174]"></a>denki_test_signal_ans_wait</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, anjou_test.o(i.denki_test_signal_ans_wait))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_tester_mode
</UL>

<P><STRONG><a name="[173]"></a>denki_test_signal_wait</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, anjou_test.o(i.denki_test_signal_wait))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_tester_mode
</UL>

<P><STRONG><a name="[16a]"></a>denki_test_start</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, anjou_test.o(i.denki_test_start))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_tester_mode
</UL>

<P><STRONG><a name="[fa]"></a>denki_tester_mode</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, anjou_test.o(i.denki_tester_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = denki_tester_mode &rArr; denki_test_learn_check &rArr; check_flash_learndata &rArr; data_read_flashmemory_h_size &rArr; get_storage_data
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_test_start
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_test_signal_wait
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_test_signal_ans_wait
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_test_power_check_wait
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_test_open_vib_check
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_test_open_stop_wait
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_test_learn_stop
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_test_learn_check
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_test_encoder_check
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_test_close_vib_check
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_test_close_stop_wait
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;denki_test_100v_wait
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_mode_change
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anjou_test_signal
</UL>

<P><STRONG><a name="[f7]"></a>ready_torque_tester_mode</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, anjou_test.o(i.ready_torque_tester_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ready_torque_tester_mode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cansel_torque_tester_mode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_ver_up_wait
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_ver_down_wait
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_pulse_in_wait
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_100v_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anjou_test_signal
</UL>

<P><STRONG><a name="[f8]"></a>torque_tester_mode</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, anjou_test.o(i.torque_tester_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = torque_tester_mode &rArr; trq_test_open_kahuka_wait &rArr; check_flash_learndata &rArr; data_read_flashmemory_h_size &rArr; get_storage_data
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_start
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_rev_trq_wait
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_open_trq_adjust
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_open_kahuka_wait
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_module_connect
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_close_trq_adjust
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_close_kahuka_wait
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_test_mode_change
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anjou_test_signal
</UL>

<P><STRONG><a name="[f9]"></a>torque_tester_release_elec</STRONG> (Thumb, 152 bytes, Stack size 4 bytes, anjou_test.o(i.torque_tester_release_elec))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = torque_tester_release_elec &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anjou_test_signal
</UL>

<P><STRONG><a name="[1d8]"></a>trq_test_100v_wait</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, anjou_test.o(i.trq_test_100v_wait))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_torque_tester_mode
</UL>

<P><STRONG><a name="[1f2]"></a>trq_test_close_kahuka_wait</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, anjou_test.o(i.trq_test_close_kahuka_wait))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torque_tester_mode
</UL>

<P><STRONG><a name="[1f3]"></a>trq_test_close_trq_adjust</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, anjou_test.o(i.trq_test_close_trq_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = trq_test_close_trq_adjust &rArr; check_torque_adjust &rArr; a_vog_trqajst_dataset
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_torque_adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torque_tester_mode
</UL>

<P><STRONG><a name="[1ef]"></a>trq_test_module_connect</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, anjou_test.o(i.trq_test_module_connect))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torque_tester_mode
</UL>

<P><STRONG><a name="[1f0]"></a>trq_test_open_kahuka_wait</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, anjou_test.o(i.trq_test_open_kahuka_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trq_test_open_kahuka_wait &rArr; check_flash_learndata &rArr; data_read_flashmemory_h_size &rArr; get_storage_data
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_flash_learndata
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torque_tester_mode
</UL>

<P><STRONG><a name="[1f1]"></a>trq_test_open_trq_adjust</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, anjou_test.o(i.trq_test_open_trq_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = trq_test_open_trq_adjust &rArr; check_torque_adjust &rArr; a_vog_trqajst_dataset
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_torque_adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torque_tester_mode
</UL>

<P><STRONG><a name="[1da]"></a>trq_test_pulse_in_wait</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, anjou_test.o(i.trq_test_pulse_in_wait))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_torque_tester_mode
</UL>

<P><STRONG><a name="[1f4]"></a>trq_test_rev_trq_wait</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, anjou_test.o(i.trq_test_rev_trq_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = trq_test_rev_trq_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_tester_douki
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torque_tester_mode
</UL>

<P><STRONG><a name="[1ee]"></a>trq_test_start</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, anjou_test.o(i.trq_test_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = trq_test_start &rArr; reset_flash_learndata &rArr; make_size_check_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fact_trq_test
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_flash_learndata
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torque_tester_mode
</UL>

<P><STRONG><a name="[1d9]"></a>trq_test_ver_down_wait</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, anjou_test.o(i.trq_test_ver_down_wait))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_torque_tester_mode
</UL>

<P><STRONG><a name="[1db]"></a>trq_test_ver_up_wait</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, anjou_test.o(i.trq_test_ver_up_wait))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_torque_tester_mode
</UL>

<P><STRONG><a name="[1f5]"></a>wait_tester_douki</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, anjou_test.o(i.wait_tester_douki))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trq_test_rev_trq_wait
</UL>

<P><STRONG><a name="[d6]"></a>a_vol_check_fullclose_learncondition_100</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, call_mode_process.o(i.a_vol_check_fullclose_learncondition_100))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = a_vol_check_fullclose_learncondition_100 &rArr; learn_data_make &rArr; make_std_learn &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_write_data
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_data_make
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_block_ope
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_close_huka
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_100_109
</UL>

<P><STRONG><a name="[db]"></a>a_vol_check_learn_condition_at_102</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, call_mode_process.o(i.a_vol_check_learn_condition_at_102))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = a_vol_check_learn_condition_at_102
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_close_huka
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_stop_102
</UL>

<P><STRONG><a name="[15f]"></a>a_vol_check_position_128</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, call_mode_process.o(i.a_vol_check_position_128))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_120_159
</UL>

<P><STRONG><a name="[160]"></a>a_vol_check_position_130</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, call_mode_process.o(i.a_vol_check_position_130))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_120_159
</UL>

<P><STRONG><a name="[163]"></a>a_vol_check_position_199</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, call_mode_process.o(i.a_vol_check_position_199))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_190_255
</UL>

<P><STRONG><a name="[dc]"></a>a_vol_check_stop_102</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, call_mode_process.o(i.a_vol_check_stop_102))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = a_vol_check_stop_102 &rArr; a_vol_check_learn_condition_at_102
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_learn_condition_at_102
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_100_109
</UL>

<P><STRONG><a name="[162]"></a>a_vol_check_stop_180_183</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, call_mode_process.o(i.a_vol_check_stop_180_183))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_180_189
</UL>

<P><STRONG><a name="[159]"></a>process_ready_open</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, call_mode_process.o(i.process_ready_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = process_ready_open &rArr; process_close_u &rArr; mode_close_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_close_u
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_20_99
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_190_255
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_170_179
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_120_159
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_100_109
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_0_9
</UL>

<P><STRONG><a name="[161]"></a>process_short_open</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, call_mode_process.o(i.process_short_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = process_short_open &rArr; process_open_u &rArr; mode_open_u &rArr; calcu_std_huka &rArr; plus_a_cal &rArr; a_u2g_close_AD_exchange_to_Nm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_open_u
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_20_99
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_mode_170_179
</UL>

<P><STRONG><a name="[110]"></a>change_pulse_width_to_rpm</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, encoder.o(i.change_pulse_width_to_rpm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = change_pulse_width_to_rpm
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_input_encoder
</UL>

<P><STRONG><a name="[186]"></a>check_abnormal_pulse</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, encoder.o(i.check_abnormal_pulse))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_input_encoder
</UL>

<P><STRONG><a name="[1e5]"></a>move_num_cont</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, encoder.o(i.move_num_cont))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_output_ope
</UL>

<P><STRONG><a name="[1c4]"></a>no_direct_p_in</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, encoder.o(i.no_direct_p_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = no_direct_p_in &rArr; ope_key_stop &rArr; sw_in_end
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ope_key_stop
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kagen_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zene_pulse_count
</UL>

<P><STRONG><a name="[1c8]"></a>ope_add_p_c</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, encoder.o(i.ope_add_p_c))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ope_pulse_count_main
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zene_pulse_count
</UL>

<P><STRONG><a name="[185]"></a>ope_pulse_count_main</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, encoder.o(i.ope_pulse_count_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ope_pulse_count_main &rArr; zene_pulse_count &rArr; no_direct_p_in &rArr; ope_key_stop &rArr; sw_in_end
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ope_redu_p_c
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ope_add_p_c
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zene_pulse_count
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_input_encoder
</UL>

<P><STRONG><a name="[1c7]"></a>ope_redu_p_c</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, encoder.o(i.ope_redu_p_c))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ope_pulse_count_main
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zene_pulse_count
</UL>

<P><STRONG><a name="[1cf]"></a>p_in_motor_stop</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, encoder.o(i.p_in_motor_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = p_in_motor_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_error_status_store
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_in_operation
</UL>

<P><STRONG><a name="[1d0]"></a>plus_operate_main</STRONG> (Thumb, 380 bytes, Stack size 8 bytes, encoder.o(i.plus_operate_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plus_operate_main &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_in_operation
</UL>

<P><STRONG><a name="[1e2]"></a>set_pwm_d</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, encoder.o(i.set_pwm_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_pwm_d
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_d_pwm
</UL>

<P><STRONG><a name="[1c9]"></a>zene_pulse_count</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, encoder.o(i.zene_pulse_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = zene_pulse_count &rArr; no_direct_p_in &rArr; ope_key_stop &rArr; sw_in_end
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ope_redu_p_c
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ope_add_p_c
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_direct_p_in
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ope_pulse_count_main
</UL>

<P><STRONG><a name="[178]"></a>ecu_setup</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ecu_test.o(i.ecu_setup))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecu_test_main
</UL>

<P><STRONG><a name="[175]"></a>ecu_test_check</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, ecu_test.o(i.ecu_test_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ecu_test_check &rArr; R_TAU0_Channel6_Start &rArr; Init_Timer17 &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel6_Start
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cansel_torque_tester_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecu_test_main
</UL>

<P><STRONG><a name="[1d1]"></a>port_in_count</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, ecu_test.o(i.port_in_count))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_input_check
</UL>

<P><STRONG><a name="[179]"></a>port_input_check</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ecu_test.o(i.port_input_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = port_input_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_off_count
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_in_count
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecu_test_main
</UL>

<P><STRONG><a name="[1d2]"></a>port_off_count</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, ecu_test.o(i.port_off_count))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_input_check
</UL>

<P><STRONG><a name="[18b]"></a>check_any_key_input</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, key_input.o(i.check_any_key_input))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_f_set
</UL>

<P><STRONG><a name="[18a]"></a>check_power_start_sw</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, key_input.o(i.check_power_start_sw))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_f_set
</UL>

<P><STRONG><a name="[188]"></a>check_sw_reset</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, key_input.o(i.check_sw_reset))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_f_set
</UL>

<P><STRONG><a name="[189]"></a>check_sw_stop_tr</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, key_input.o(i.check_sw_stop_tr))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_f_set
</UL>

<P><STRONG><a name="[1ea]"></a>open_close_production_test</STRONG> (Thumb, 428 bytes, Stack size 0 bytes, key_input.o(i.open_close_production_test))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_input_check
</UL>

<P><STRONG><a name="[1ed]"></a>sw_all_off_ope</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, key_input.o(i.sw_all_off_ope))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_input_check
</UL>

<P><STRONG><a name="[1eb]"></a>sw_in_count</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, key_input.o(i.sw_in_count))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_input_check
</UL>

<P><STRONG><a name="[1ec]"></a>sw_off_count</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, key_input.o(i.sw_off_count))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_input_check
</UL>

<P><STRONG><a name="[e1]"></a>ad_correct</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, overload.o(i.ad_correct))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ad_correct &rArr; capture_ad_start &rArr; R_ADC_Start &rArr; ADC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_startup
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_ad_start
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bad_data_del
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adopt_data_num_set
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_start_set
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hosei_culc_temp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_hosei
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_data_full_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_operate_main
</UL>

<P><STRONG><a name="[e9]"></a>ad_data_full_buffer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, overload.o(i.ad_data_full_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_correct
</UL>

<P><STRONG><a name="[e7]"></a>ad_hosei</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, overload.o(i.ad_hosei))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ad_hosei &rArr; huka_lev_ver &rArr; hosei_culc_ver
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huka_lev_ver
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_correct
</UL>

<P><STRONG><a name="[ec]"></a>ad_port_select</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, overload.o(i.ad_port_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ad_port_select
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_torque_test_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_operate_main
</UL>

<P><STRONG><a name="[fe]"></a>bousou_check</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, overload.o(i.bousou_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bousou_check &rArr; ope_key_stop &rArr; sw_in_end
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ope_key_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curr_lev_de
</UL>

<P><STRONG><a name="[136]"></a>check_temp_error</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, overload.o(i.check_temp_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = check_temp_error &rArr; sort_check_ad_data
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ecu_test_state
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_check_ad_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_temp_value
</UL>

<P><STRONG><a name="[143]"></a>check_ver_error</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, overload.o(i.check_ver_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = check_ver_error &rArr; sort_check_ad_data
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ecu_test_state
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_check_ad_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_ver_value
</UL>

<P><STRONG><a name="[fd]"></a>cul_bad_data_del</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, overload.o(i.cul_bad_data_del))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bad_data_del
</UL>

<P><STRONG><a name="[e8]"></a>hosei_culc_temp</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, overload.o(i.hosei_culc_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hosei_culc_temp &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_correct
</UL>

<P><STRONG><a name="[17f]"></a>hosei_culc_ver</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, overload.o(i.hosei_culc_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hosei_culc_ver
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_error_status_store
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huka_lev_ver
</UL>

<P><STRONG><a name="[137]"></a>sort_check_ad_data</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, overload.o(i.sort_check_ad_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sort_check_ad_data
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ver_error
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_temp_error
</UL>

<P><STRONG><a name="[ee]"></a>watch_temp_value</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, overload.o(i.watch_temp_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = watch_temp_value &rArr; check_temp_error &rArr; sort_check_ad_data
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_temp_error
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_operate_main
</UL>

<P><STRONG><a name="[ef]"></a>watch_ver_value</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, overload.o(i.watch_ver_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = watch_ver_value &rArr; check_ver_error &rArr; sort_check_ad_data
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ver_error
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad_operate_main
</UL>

<P><STRONG><a name="[ce]"></a>a_vol_check_f_signal_rank_high</STRONG> (Thumb, 604 bytes, Stack size 8 bytes, select_signal.o(i.a_vol_check_f_signal_rank_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = a_vol_check_f_signal_rank_high &rArr; ope_key_stop &rArr; sw_in_end
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_error_status_store
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osikiri_reset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ope_key_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_signal
</UL>

<P><STRONG><a name="[d2]"></a>a_vol_check_f_signal_rank_highest</STRONG> (Thumb, 506 bytes, Stack size 8 bytes, select_signal.o(i.a_vol_check_f_signal_rank_highest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a_vol_check_f_signal_rank_highest &rArr; a_vol_set_error_data
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_error_status_store
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_set_error_data
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osikiri_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_signal
</UL>

<P><STRONG><a name="[1e0]"></a>a_vol_check_f_signal_rank_low</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, select_signal.o(i.a_vol_check_f_signal_rank_low))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_signal
</UL>

<P><STRONG><a name="[d4]"></a>a_vol_check_f_signal_rank_lower</STRONG> (Thumb, 1208 bytes, Stack size 8 bytes, select_signal.o(i.a_vol_check_f_signal_rank_lower))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = a_vol_check_f_signal_rank_lower &rArr; learn_fullclose_position &rArr; error_ope_main &rArr; check_open_learn_error &rArr; set_error_open_learn_data &rArr; plus_a_cal_open &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_fullclose_position
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_signal
</UL>

<P><STRONG><a name="[dd]"></a>a_vol_f_set_overload</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, select_signal.o(i.a_vol_f_set_overload))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = a_vol_f_set_overload
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_all_event_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_signal
</UL>

<P><STRONG><a name="[d3]"></a>a_vol_set_error_data</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, select_signal.o(i.a_vol_set_error_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = a_vol_set_error_data
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vog_error_status_store
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_vol_check_f_signal_rank_highest
</UL>

<P><STRONG><a name="[ff]"></a>break_off_pwm_restart</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, tst_break.o(i.break_off_pwm_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = break_off_pwm_restart &rArr; pwm_on_break_off_setting &rArr; R_TAU0_Channel6_Stop &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_on_break_off_setting
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_break_step_change
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_t_break_main
</UL>

<P><STRONG><a name="[102]"></a>break_step0_to_1</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tst_break.o(i.break_step0_to_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = break_step0_to_1 &rArr; get_break_data &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_break_data
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_break_step_change
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_t_break_main
</UL>

<P><STRONG><a name="[100]"></a>check_break_step_change</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, tst_break.o(i.check_break_step_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_break_step_change
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_t_break_main
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;break_step0_to_1
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;break_off_pwm_restart
</UL>

<P><STRONG><a name="[135]"></a>check_stop_pulse</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tst_break.o(i.check_stop_pulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_stop_pulse
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_t_break_main
</UL>

<P><STRONG><a name="[103]"></a>get_break_data</STRONG> (Thumb, 198 bytes, Stack size 4 bytes, tst_break.o(i.get_break_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_break_data &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_t_break_main
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_break_on
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_off_break_on_setting
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_off_break_max_setting
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;break_step0_to_1
</UL>

<P><STRONG><a name="[131]"></a>pwm_break_time</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tst_break.o(i.pwm_break_time))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_t_break_main
</UL>

<P><STRONG><a name="[1d6]"></a>pwm_off_break_max_setting</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tst_break.o(i.pwm_off_break_max_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = pwm_off_break_max_setting &rArr; R_TAU0_Channel6_Start &rArr; Init_Timer17 &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel6_Start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_break_data
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_break_on
</UL>

<P><STRONG><a name="[132]"></a>pwm_off_break_off_setting</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tst_break.o(i.pwm_off_break_off_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pwm_off_break_off_setting &rArr; R_TAU0_Channel6_Stop &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel6_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_t_break_main
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_break_on
</UL>

<P><STRONG><a name="[133]"></a>pwm_off_break_on_setting</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tst_break.o(i.pwm_off_break_on_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = pwm_off_break_on_setting &rArr; R_TAU0_Channel6_Start &rArr; Init_Timer17 &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel6_Start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_break_data
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_t_break_main
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_break_on
</UL>

<P><STRONG><a name="[101]"></a>pwm_on_break_off_setting</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tst_break.o(i.pwm_on_break_off_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pwm_on_break_off_setting &rArr; R_TAU0_Channel6_Stop &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_TAU0_Channel6_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_t_break_main
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;break_off_pwm_restart
</UL>

<P><STRONG><a name="[134]"></a>t_break_on</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, tst_break.o(i.t_break_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = t_break_on &rArr; pwm_off_break_on_setting &rArr; R_TAU0_Channel6_Start &rArr; Init_Timer17 &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_off_break_on_setting
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_off_break_off_setting
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_off_break_max_setting
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_break_data
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_t_break_main
</UL>

<P><STRONG><a name="[3d]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[3c]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1ff]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[1fb]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[50]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
